package com.isnoc.medicalcenter.util;

import com.fasterxml.jackson.databind.JsonNode;
import com.isnoc.medicalcenter.entity.Report;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.font.Standard14Fonts;
import org.springframework.stereotype.Component;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.format.DateTimeFormatter;
import java.util.Iterator;
import java.util.Map;

@Component
public class PdfGenerationUtil {

    private static final float MARGIN = 50;
    private static final float Y_START = 750;
    private static final float LINE_HEIGHT = 15;
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    /**
     * Generate a PDF report from a Report entity
     * 
     * @param report The report entity containing data to be rendered
     * @return PDF as byte array
     * @throws IOException if there's an error generating the PDF
     */
    public byte[] generateReportPdf(Report report) throws IOException {
        try (PDDocument document = new PDDocument()) {
            PDPage page = new PDPage();
            document.addPage(page);

            try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
                // Add title
                contentStream.beginText();
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 16);
                contentStream.newLineAtOffset(MARGIN, Y_START);
                contentStream.showText(report.getReportType().getReportName());
                contentStream.endText();

                // Add patient info
                contentStream.beginText();
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 12);
                contentStream.newLineAtOffset(MARGIN, Y_START - 30);
                contentStream.showText("Patient: " + report.getVisit().getPatient().getFullName());
                contentStream.newLineAtOffset(0, -LINE_HEIGHT);
                contentStream.showText("Date of Birth: " + report.getVisit().getPatient().getDateOfBirth().format(DateTimeFormatter.ISO_LOCAL_DATE));
                contentStream.newLineAtOffset(0, -LINE_HEIGHT);
                contentStream.showText("Visit Date: " + report.getVisit().getVisitDate().format(DATE_FORMATTER));
                contentStream.newLineAtOffset(0, -LINE_HEIGHT);
                contentStream.showText("Report Generated: " + report.getLastModifiedDate().format(DATE_FORMATTER));
                contentStream.endText();

                // Add report data
                float yPosition = Y_START - 100;
                
                if (report.getReportData() != null) {
                    yPosition = renderJsonNode(contentStream, report.getReportData(), MARGIN, yPosition);
                }
                
                // Add footer
                contentStream.beginText();
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_OBLIQUE), 10);
                contentStream.newLineAtOffset(MARGIN, 50);
                contentStream.showText("Generated by Medical Center Management System - Report ID: " + report.getReportId());
                contentStream.endText();
            }

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            document.save(baos);
            return baos.toByteArray();
        }
    }

    /**
     * Recursively render JSON data into the PDF document
     */
    private float renderJsonNode(PDPageContentStream contentStream, JsonNode node, float xOffset, float yPosition) throws IOException {
        if (node.isObject()) {
            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> entry = fields.next();
                String fieldName = entry.getKey();
                JsonNode value = entry.getValue();

                if (value.isObject() || value.isArray()) {
                    contentStream.beginText();
                    contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 12);
                    contentStream.newLineAtOffset(xOffset, yPosition);
                    contentStream.showText(fieldName + ":");
                    contentStream.endText();
                    yPosition -= LINE_HEIGHT;

                    // Recursively handle nested objects and arrays
                    yPosition = renderJsonNode(contentStream, value, xOffset + 10, yPosition);
                } else {
                    contentStream.beginText();
                    contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 12);
                    contentStream.newLineAtOffset(xOffset, yPosition);
                    contentStream.showText(fieldName + ": " + formatJsonValue(value));
                    contentStream.endText();
                    yPosition -= LINE_HEIGHT;
                }
            }
        } else if (node.isArray()) {
            int index = 0;
            for (JsonNode element : node) {
                if (element.isObject() || element.isArray()) {
                    contentStream.beginText();
                    contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 12);
                    contentStream.newLineAtOffset(xOffset, yPosition);
                    contentStream.showText("[" + index + "]");
                    contentStream.endText();
                    yPosition -= LINE_HEIGHT;
                    
                    yPosition = renderJsonNode(contentStream, element, xOffset + 10, yPosition);
                } else {
                    contentStream.beginText();
                    contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 12);
                    contentStream.newLineAtOffset(xOffset, yPosition);
                    contentStream.showText("[" + index + "]: " + formatJsonValue(element));
                    contentStream.endText();
                    yPosition -= LINE_HEIGHT;
                }
                index++;
            }
        }
        
        // Add some spacing after each object or array
        return yPosition - 5;
    }
    
    /**
     * Format JSON values appropriately for display in PDF
     */
    private String formatJsonValue(JsonNode node) {
        if (node.isTextual()) {
            return node.textValue();
        } else if (node.isNumber()) {
            return node.numberValue().toString();
        } else if (node.isBoolean()) {
            return Boolean.toString(node.booleanValue());
        } else if (node.isNull()) {
            return "Not available";
        } else {
            return node.toString();
        }
    }
    
    /**
     * Generate a PDF bill
     * 
     * @param bill The bill entity to generate a PDF for
     * @return PDF as byte array
     * @throws IOException if there's an error generating the PDF
     */
    public byte[] generateBillPdf(com.isnoc.medicalcenter.entity.Bill bill) throws IOException {
        try (PDDocument document = new PDDocument()) {
            PDPage page = new PDPage();
            document.addPage(page);

            try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
                // Add title
                contentStream.beginText();
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 18);
                contentStream.newLineAtOffset(MARGIN, Y_START);
                contentStream.showText("Medical Center - Invoice");
                contentStream.endText();

                // Add clinic info
                contentStream.beginText();
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 12);
                contentStream.newLineAtOffset(MARGIN, Y_START - 30);
                contentStream.showText("Unawatune Medical Center");
                contentStream.newLineAtOffset(0, -LINE_HEIGHT);
                contentStream.showText("123 Medical Avenue, Unawatune");
                contentStream.newLineAtOffset(0, -LINE_HEIGHT);
                contentStream.showText("Phone: +94 123 456 7890");
                contentStream.endText();

                // Add bill details
                contentStream.beginText();
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 12);
                contentStream.newLineAtOffset(MARGIN, Y_START - 80);
                contentStream.showText("Invoice #: " + bill.getBillId());
                contentStream.newLineAtOffset(0, -LINE_HEIGHT);
                contentStream.showText("Date: " + bill.getCreatedDate().format(DATE_FORMATTER));
                contentStream.newLineAtOffset(0, -LINE_HEIGHT);
                contentStream.showText("Patient: " + bill.getPatient().getFullName());
                contentStream.newLineAtOffset(0, -LINE_HEIGHT);
                contentStream.showText("Patient ID: " + bill.getPatient().getPatientId());
                contentStream.endText();

                // Add table header
                float yPosition = Y_START - 150;
                float tableStartX = MARGIN;
                float descriptionColWidth = 300;
                float amountColWidth = 100;
                float tableWidth = descriptionColWidth + amountColWidth;

                // Draw the table header
                contentStream.setNonStrokingColor(0.8f, 0.8f, 0.8f); // Light gray
                contentStream.addRect(tableStartX, yPosition - 15, tableWidth, 20);
                contentStream.fill();
                contentStream.setNonStrokingColor(0, 0, 0); // Reset to black

                contentStream.beginText();
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 12);
                contentStream.newLineAtOffset(tableStartX + 5, yPosition - 10);
                contentStream.showText("Description");
                contentStream.endText();

                contentStream.beginText();
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 12);
                contentStream.newLineAtOffset(tableStartX + descriptionColWidth + 5, yPosition - 10);
                contentStream.showText("Amount");
                contentStream.endText();

                yPosition -= 25;

                // Add bill items
                float totalAmount = 0;
                for (com.isnoc.medicalcenter.entity.BillItem item : bill.getBillItems()) {
                    // Draw row
                    contentStream.beginText();
                    contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 12);
                    contentStream.newLineAtOffset(tableStartX + 5, yPosition);
                    contentStream.showText(item.getDescription());
                    contentStream.endText();

                    contentStream.beginText();
                    contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 12);
                    contentStream.newLineAtOffset(tableStartX + descriptionColWidth + 5, yPosition);
                    contentStream.showText(String.format("$%.2f", item.getAmount()));
                    contentStream.endText();

                    totalAmount += item.getAmount();
                    yPosition -= 20;
                }

                // Draw total
                contentStream.setNonStrokingColor(0.8f, 0.8f, 0.8f); // Light gray
                contentStream.addRect(tableStartX, yPosition - 15, tableWidth, 20);
                contentStream.fill();
                contentStream.setNonStrokingColor(0, 0, 0); // Reset to black

                contentStream.beginText();
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 12);
                contentStream.newLineAtOffset(tableStartX + 5, yPosition - 10);
                contentStream.showText("Total");
                contentStream.endText();

                contentStream.beginText();
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 12);
                contentStream.newLineAtOffset(tableStartX + descriptionColWidth + 5, yPosition - 10);
                contentStream.showText(String.format("$%.2f", totalAmount));
                contentStream.endText();

                // Add footer
                contentStream.beginText();
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_OBLIQUE), 10);
                contentStream.newLineAtOffset(MARGIN, 50);
                contentStream.showText("Thank you for choosing Unawatune Medical Center");
                contentStream.endText();
            }

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            document.save(baos);
            return baos.toByteArray();
        }
    }
}